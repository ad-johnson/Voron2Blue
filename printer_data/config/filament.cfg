
#####################################################################
#   Handles loading/unloading of filament.  Based on jschuh's macros:
# https://github.com/jschuh/klipper-macros/blob/main/filament.cfg
#####################################################################

[gcode_macro _load_unload]
gcode:
  {% set EXTRUDER = printer.toolhead.extruder %}
  {% set current_temp = printer[EXTRUDER].target %}  # Track current target to return to after load/unload
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}
  # Use the global min as default if provided, else use per extruder min + 5.
  {% set default_minimum = mv.load_min_temp if mv.load_min_temp else
         (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
  {% if 'MINIMUM' in params %}
    {% set MINIMUM = params.MINIMUM|int %}
  # This is the special case for a filament change after an idle timeout.
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
          printer["gcode_macro RESUME"].etemp %}
    {% set MINIMUM = printer["gcode_macro RESUME"].etemp %}
  # Use the target temp if higher than the default.
  {% elif printer[EXTRUDER].target > default_minimum %}
    {% set MINIMUM = printer[EXTRUDER].target %}
  {% else %}
    {% set MINIMUM = default_minimum %}
  {% endif %}
  {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    # Clear the saved E if we're (un-)loading while paused.
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  {% endif %}
  
  {% set SPEED = params.SPEED|default(mv.load_speed)|int %}
  {% set priming_length = mv.load_priming_length %}
  {% set LENGTH = params.LENGTH|default(mv.load_length)|float - priming_length%}
  {% if LENGTH < 0 %}
    {% set priming_length = (priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  
  SAVE_GCODE_STATE NAME=_LOAD_UNLOAD

  {% if not printer.extruder.can_extrude or
        printer[EXTRUDER].target < default_minimum %}
    M118 Preheating {EXTRUDER} to {MINIMUM}c
    M109 S{MINIMUM}
  {% endif %}
  M83
  {% set priming_speed = (mv.load_priming_speed, SPEED)|min %}
  {% if params.LOAD|int %}
    M118 Extruding a total of {LENGTH} + {priming_length} mm
    G0 E{LENGTH} F{SPEED}
    G0 E{priming_length} F{priming_speed}
    G0 E{'%.4f' % -printer["gcode_macro RESUME"].saved_e} F{mv.load_speed}
  {% else %}
    {% set pre_prime_distance = 5.0 %}
    {% set shaping_moves = 5 %}
    {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
    # Push forward to heat up, then retract to the edge of the meltzone.
    G0 E{pre_prime_distance} F{SPEED}
    G4 P500
    G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
    # Shape the tip with a pairs of short extrusions and retractions, where
    # the retractions get increasingly longer than the extrusion.
    {% for i in range(1, shaping_moves + 1) %}
      G0 E2 F{priming_speed}
      G0 E-{2 + (0.1 * i)} F{priming_speed}
    {% endfor %}
    # Retract the rest of the length.
    G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
  {% endif %}

  M109 S{current_temp}  # Return to previous extruder temperature
  
  RESTORE_GCODE_STATE NAME=_LOAD_UNLOAD

  
#####################################################################
#   Loads filament.  Can only be called when not printing or paused
#####################################################################
[gcode_macro LOAD_PLA]
gcode:
  LOAD_FILAMENT MINIMUM=220

[gcode_macro LOAD_ABS]
gcode:
  LOAD_FILAMENT MINIMUM=240

[gcode_macro LOAD_FILAMENT]
gcode:
  {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}         # Only load if not printing
    M118 Loading filament
    {% if 'MINIMUM' in params %}
      _LOAD_UNLOAD LOAD=1 MINIMUM={params.MINIMUM}
    {% else %}
      _LOAD_UNLOAD LOAD=1
    {% endif %}
    M118 Filament loaded
  {% else %}
    M118 Printer is busy, cannot load filament
  {% endif %}


#####################################################################
#   Unloads filament.  Can only be called when not printing or paused
#####################################################################

[gcode_macro UNLOAD_PLA]
gcode:
  UNLOAD_FILAMENT MINIMUM=220

[gcode_macro UNLOAD_ABS]
gcode:
  UNLOAD_FILAMENT MINIMUM=240

[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}         # Only load if not printing
    M118 Unloading filament
    {% if 'MINIMUM' in params %}
      _LOAD_UNLOAD LOAD=0 MINIMUM={params.MINIMUM}
    {% else %}
      _LOAD_UNLOAD LOAD=0
    {% endif %}
    M118 Filament unloaded
  {% else %}
    M118 Printer is busy, cannot unload filament
  {% endif %}


#####################################################################
#   Purges filament over the bucket.  
# Needs proper testing
#####################################################################

[gcode_macro _PURGE_FILAMENT]

# parameters TOOL_TEMP, PURGE_LEN, POST_TOOL_TEMP

gcode:

  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    STATUS_PRINTING
    M118 Purging filament
    
    ## Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=purge_filament

    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
#    {% set bucket_x = mv.bucket_x %}                # X position for purging over bucket
#    {% set bucket_y = mv.bucket_y %}                # Y position for purging overbucket
#    {% set clearance_z = mv.clearance_z %}          # Safe Z height for travel to bucket
#    {% set travel_speed_z = mv.travel_speed_z %}    # Travel speed along z axis in mm/min.
#    {% set travel_speed_xy = mv.travel_speed_xy %}  # Travel speed along x and y-axis in mm/min.
#    {% set purge_height = mv.purge_height %}        # Height of nozzle for purge
#    {% set purge_len = mv.purge_len %}              # Amount of filament, in mm, to purge.
#    {% set purge_speed = mv.purge_speed %}          # Speed, in mm/min, of the purge.
#    {% set purge_temp_min = mv.purge_temp_min %}    # (Minimum) Temperature to purge at
#    {% set post_purge_temp = mv.post_purge_temp %}  # Temperature to set hot end after purge.
#    {% set purge_retract = mv.purge_retract %}      # Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
#    {% set ooze_dwell = mv.ooze_dwell %}            # Dwell/wait time, in seconds, after purging and retracting.
 
    ## Set to absolute positioning.
    G90

    #raise to a safe travel Z if necessary
    {% if printer.toolhead.position.z < mv.clearance_z %}
      G1 Z{mv.clearance_z} F{mv.travel_speed_z}
    {% endif %}
    
    # move to purge location and height
    G1 X{mv.bucket_x} Y{mv.bucket_y} F{mv.travel_speed_xy}
    G1 Z{mv.purge_height}
    
    # Set hot end to purging temperature and wait until it is reached.
    M109 S{params.TOOL_TEMP|default(mv.purge_temp_min)|int}

    ### Perform purge 
    ### Small retract afterpurging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
    {% if printer.extruder.temperature >= mv.purge_temp_min %}
      M83      ; relative mode
      M118 Purging now
      G1 E{params.PURGE_LEN|default(mv.purge_len)|int} F{mv.purge_speed}
      M118 Preventing ooze
      G1 E-{mv.purge_retract} F{mv.purge_speed * 5}
      G4 P{mv.ooze_dwell * 1000}
      G92 E0   ; reset extruder
    {% endif %}
    M118 Filament purged

    # Set the hot end to the post purging temperature, if provided otherwise ignore
    {% if params.POST_TOOL_TEMP|default(-1)|int != -1 %}
      M118 Waiting for post purge hot end temperature
      M109 R{params.POST_TOOL_TEMP|int}
      M118 Temperature reached.
    {% endif %}

    M118 Filament purge complete.
    STATUS_READY
    
    ## Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=purge_filament
 
  {% else %}

    ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("PURGE_FILAMENT Axes must be homed first.") }
    M118 Please home before purging filament!

  {% endif %}
