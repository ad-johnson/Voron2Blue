[include my_variables.cfg]

[pause_resume]

#####################################################################
#   Handles loading/unloading of filament.  Based on jschuh's macros:
# https://github.com/jschuh/klipper-macros/blob/main/filament.cfg
#####################################################################

[gcode_macro _load_unload]
gcode:
  {% set EXTRUDER = printer.toolhead.extruder %}
  {% set current_temp = printer[EXTRUDER].target %}  # Track current target to return to after load/unload
#  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}
 
  # Use the global min as default if provided, else use per extruder min + 5.
  {% set default_minimum = mv.load_min_temp if mv.load_min_temp else
         (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
  {% if 'MINIMUM' in params %}
    {% set MINIMUM = params.MINIMUM|int %}
  # This is the special case for a filament change after an idle timeout.
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
          printer["gcode_macro resume"].etemp %}
    {% set MINIMUM = printer["gcode_macro resume"].etemp %}
  # Use the target temp if higher than the default.
  {% elif printer[EXTRUDER].target > default_minimum %}
    {% set MINIMUM = printer[EXTRUDER].target %}
  {% else %}
    {% set MINIMUM = default_minimum %}
  {% endif %}
  {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    # Clear the saved E if we're (un-)loading while paused.
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  {% endif %}
  
  {% set SPEED = params.SPEED|default(mv.load_speed)|int %}
  {% set priming_length = mv.load_priming_length %}
  {% set LENGTH = params.LENGTH|default(mv.load_length)|float - priming_length%}
  {% if LENGTH < 0 %}
    {% set priming_length = (priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  
  SAVE_GCODE_STATE NAME=_LOAD_UNLOAD

  {% if not printer.extruder.can_extrude or
        printer[EXTRUDER].target < default_minimum %}
    M118 Preheating {EXTRUDER} to {MINIMUM}c
    M109 S{MINIMUM}
  {% endif %}
  M83
  {% set priming_speed = (mv.load_priming_speed, SPEED)|min %}
  {% if params.LOAD|int %}
    G0 E{LENGTH} F{SPEED}
    G0 E{priming_length} F{priming_speed}
    G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{mv.load_speed}
  {% else %}
    {% set pre_prime_distance = 5.0 %}
    {% set shaping_moves = 5 %}
    {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
    # Push forward to heat up, then retract to the edge of the meltzone.
    G0 E{pre_prime_distance} F{SPEED}
    G4 P500
    G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
    # Shape the tip with a pairs of short extrusions and retractions, where
    # the retractions get increasingly longer than the extrusion.
    {% for i in range(1, shaping_moves + 1) %}
      G0 E2 F{priming_speed}
      G0 E-{2 + (0.1 * i)} F{priming_speed}
    {% endfor %}
    # Retract the rest of the length.
    G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
  {% endif %}

  M109 S{current_temp}  # Return to previous extruder temperature
  
  RESTORE_GCODE_STATE NAME=_LOAD_UNLOAD

#####################################################################
#   Cancels the print and runs the print end routin.  Based on Elis's macros:
# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT # Rename Mainsail Cancel Print macro
gcode:
  M118 Print cancelled.
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  # set timeout back to configured value
  CLEAR_PAUSE
  PRINT_END
#  CANCEL_PRINT_BASE  
  BASE_CANCEL_PRINT
  
#####################################################################
#   Centre nozzle over bed
#####################################################################
  
[gcode_macro CENTRE_NOZZLE]

gcode:
  {% set th = printer.toolhead %}
  {% set x_ctr = th.axis_maximum.x / 2 %}
  {% set y_ctr = th.axis_maximum.y / 2 %}
  {% set z_height = params.Z|default(printer["gcode_macro MY_VARIABLES"].clearance_z)|int %}
  
  # First, check if the axes are homed.
  {% if "xyz" in th.homed_axes %}
    STATUS_HOMING                           # not homing, but moving axes so use this status
    G90                                     # absolute position
    G1 X{x_ctr} Y{y_ctr} Z{z_height} F9000  # Move to centre
    STATUS_READY
    
  {% else %}

    ## raise error will stop any macros that CENTRE_NOZZLE is referenced in from proceeding for safety.
    { action_raise_error("CENTRE_NOZZLE Axes must be homed first.") }
    M118 Please home before centring nozzle!
    STATUS_READY
  {% endif %}


#####################################################################
#   Clean the nozzle with the brush
#####################################################################
  
[gcode_macro CLEAN_NOZZLE]
# Parameters: ZZ: Use zig-zsg wipe patter if 1, straight otherwise

gcode:

  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    STATUS_CLEANING
    M118 Cleaning the nozzle.
    ## Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=clean_nozzle
    G90 ; absolute positioning

    {% set use_zigzag = params.ZZ|default(0)|int %}
    {% set start_x = mv.clean_start_x %}
    {% set start_y = mv.clean_start_y %}
    {% set start_z = mv.clean_start_z %}
    {% set wipe_spd = mv.wipe_spd %}
    {% set wipe_qty = mv.wipe_qty %}
    {% set raise_distance = mv.clearance_z %}

    {% if use_zigzag == 0 %}
      {% set wipe_x_dist = mv.bucket_x - start_x %}
      G1 X{start_x} Y{start_y + 6} F6000  # adjust to the centre of the brush if doing straight wipe
    {% else %}
      {% set wipe_x_dist = mv.wipe_x_dist %}
      {% set wipe_y_dist = mv.wipe_y_dist %}
      G1 X{start_x} Y{start_y} F6000
    {% endif %}

    ## Move nozzle to start position
    G1 Z{start_z} F1500
    G91 ; relative movements

    {% if use_zigzag == 1 %}
      ## Wipe nozzle in zig-zags
      {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{wipe_x_dist} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist} Y{wipe_y_dist * -1} F{wipe_spd * 60}
        G1 X{wipe_x_dist} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist} Y{wipe_y_dist * -1} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist * -1} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist * -1} F{wipe_spd * 60}
      {% endfor %}
    {% else %}
      ## Wipe nozzle in straight lines  
      {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{wipe_x_dist} F{wipe_spd * 60}
        G1 X-{wipe_x_dist} F{wipe_spd * 60}
      {% endfor %}
    {% endif %}
    
    G90 ; absolute positioning
    ## Raise nozzle
    G1 Z{raise_distance}
    M118 Nozzle cleaned
    STATUS_READY

    ## Restore the gcode state from this macro instance.
    RESTORE_GCODE_STATE NAME=clean_nozzle
     
  {% else %}

    ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("CLEAN_NOZZLE Axes must be homed first.") }
    M118 Please home before cleaning the nozzle!

  {% endif %}

#####################################################################
#  Resets the pause without resuming
#####################################################################
[gcode_macro CLEAR_PAUSE]
description: Clears the current pause state.
  Usage: CLEAR_PAUSE
rename_existing: BASE_CLEAR_PAUSE
gcode:
  SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
  BASE_CLEAR_PAUSE
  
#####################################################################
#   Loads filament.  Can only be called when not printing or paused
#####################################################################
[gcode_macro LOAD_PLA]
gcode:
  LOAD_FILAMENT MINIMUM=220

[gcode_macro LOAD_ABS]
gcode:
  LOAD_FILAMENT MINIMUM=240

[gcode_macro UNLOAD_PLA]
gcode:
  UNLOAD_FILAMENT MINIMUM=220

[gcode_macro UNLOAD_ABS]
gcode:
  UNLOAD_FILAMENT MINIMUM=240

[gcode_macro LOAD_FILAMENT]
gcode:
  {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}         # Only load if not printing
    M118 Loading filament
    {% if 'MINIMUM' in params %}
      _LOAD_UNLOAD LOAD=1 MINIMUM=params.MINIMUM
    {% else %}
      _LOAD_UNLOAD LOAD=1
    {% endif %}
    M118 Filament loaded
  {% else %}
    M118 Printer is busy, cannot load filament
  {% endif %}


#####################################################################
#   Unloads filament.  Can only be called when not printing or paused
#####################################################################
[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}         # Only load if not printing
    M118 Unloading filament
    {% if 'MINIMUM' in params %}
      _LOAD_UNLOAD LOAD=0 MINIMUM=params.MINIMUM
    {% else %}
      _LOAD_UNLOAD LOAD=0
    {% endif %}
    M118 Filament unloaded
  {% else %}
    M118 Printer is busy, cannot unload filament
  {% endif %}

  
#####################################################################
#   Move the toolhead front and centre.  Useful for filament load/unload
#####################################################################

[gcode_macro PARK_AT_FRONT]
gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    # Parameters
    M118 Parameter Z={params.Z}
    {% set z = params.Z|default(mv.clearance_z)|int %}                                              # z hop amount
    {% set e = params.E|default(0)|int %}                                               # hotend prime amount (in mm)
    SAVE_GCODE_STATE NAME=PARK_AT_FRONT                                                 # save current print position for resume
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      # check that zhop doesn't exceed z max
      G91 # relative positioning
      M400
      M118 Raising Z by {z}mm
      G1 Z{z} E-{e} F900                                                                # raise Z up by z hop amount and retract to help stringing    
    {% else %}
      { action_respond_info("Park zhop exceeds maximum Z height.") }                    # if z max is exceeded, show message and set zhop value for resume to 0
    {% endif %}
    G90                                                                                 # absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000  # park toolhead at front center
     
  {% else %}

    ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("PARK_AT_FRONT Axes must be homed first.") }
    M118 Please home before parking the nozzle!

  {% endif %}


#####################################################################
#   Pause the printing.  Based on JSchuh's macro:
# https://github.com/jschuh/klipper-macros/blob/main/start_end.cfg
#####################################################################
  
[gcode_macro PAUSE]
description: Pauses the current print.
#  Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing: BASE_PAUSE  # rename mainsail Pause macro

gcode:
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}
  # Retract length (negative)
  {% set E = (params.E|default(mv.retraction_amount))|float %}             # Retration amount before parking
  {% set z = params.Z|default(mv.clearance_z)|int %}                       # Z-hop amount

  {% if printer.pause_resume.is_paused %}                                  # Printer must be running to pause it
    M118 Print already paused.
  {% elif printer.idle_timeout.state | string == "Printing" or
          (printer.virtual_sdcard|default({})).is_active|default(False) %}
    M118 Pausing print
    {% set position = printer.gcode_move.gcode_position %}
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"  # Tell Resume where to return to
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
    SAVE_GCODE_STATE NAME=PAUSE                                            # save current print position for resume
#    PAUSE_BASE  # Use the base pause macro as renamed by Mainsail
    BASE_PAUSE
    M83
    {% if printer.extruder.can_extrude %}
      G1 E{'%.4f' % -E} F{mv.load_speed}                                   # Retract the requested amount
    {% endif %}
    {% if (position.z + z) < printer.toolhead.axis_maximum.z %}            # check that z-hop doesn't exceed z max
      PARK_AT_FRONT Z={z} E=0
    {% else %}
      PARK_AT_FRONT Z=0 E=0
    {% endif %}
    SAVE_GCODE_STATE NAME=PAUSEPARK                                        # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    M118 Print paused.
  {% else %}
    M118 Print not in progress
  {% endif %}


#####################################################################
#   print_start macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  M118 Starting print
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("0")|int %}
  {% set material = params.MATERIAL|default("PLA") %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}

  # Turns on the LEDs, Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  SET_PIN PIN=Chamber_Light VALUE=1.00
  
  # Prevent filter fan from being turned off mid print
  UPDATE_DELAYED_GCODE ID=VENT_OFF DURATION=0

  M118 Homing
  STATUS_HOMING   # Sets SB-leds to homing-mode
  G28             # Full home (XYZ)
  G90             # Absolute position

  BED_MESH_CLEAR  # Clears old saved bed mesh (if any)

  # Start the bed heating
  M118 Heating bed: {target_bed}c                     # Displays info
  STATUS_BED_HEATING                                  # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
  M190 S{target_bed}                                  # Sets the target temp for the bed
  SET_FAN_SPEED FAN=HEPA SPEED=0                      # Turn off exhaust fan whilst heat soaking
  
  # If printing ABS then heatsoak the bed and chamber
  {% if material == "ABS" %}
    {% set heat_soak_time_min = mv.abs_soak_time / 60000 %} # convert to mins
    M118 Heatsoak at {target_chamber}c for {heat_soak_time_min} mins  # Displays info
    M106 S255                                                # Turns on the Part-fan to aid heating
    G4 P{mv.abs_soak_time}  # Waits for the bedtemp to stabilize
    {% if target_Chamber > 20 %}
      M118 Waiting for Chamber to reach {target_chamber}c
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    {% endif %}
    SET_FAN_SPEED FAN=HEPA SPEED=0.2                # Provide some negative pressure for the chamber
  {% endif %}

  # If printing PLA then heatsoak for 10 minutes only
  {% if material == "PLA" %}
    {% set heat_soak_time_min = mv.pla_soak_time / 60000 %} # convert to mins
    M118 Soak for {heat_soak_time_min} mins  # Displays info
    G4 P{mv.pla_soak_time}  # Waits for the bedtemp to stabilize
    SET_FAN_SPEED FAN=HEPA SPEED=1  # Turn on the exhaust/filter fan
  {% endif %}

  STATUS_READY
  # Heating nozzle to pre-print temp. This helps with getting a correct Z-home
  M118 Setting hotend to {mv.pre_print_nozzle_temp}c  # Displays info
  STATUS_EXT_HEATING           # Nozzle SB_LEDs to heating mode
  M109 S{mv.pre_print_nozzle_temp}  # Heats the nozzle to 150c
  STATUS_READY
  
  ##  Level gantry and rehome Z
  M118 Performing QGL  # Displays info
  STATUS_LEVELING      # Sets SB-leds to leveling-mode
  quad_gantry_level    # Levels the buildplate via QGL
  G28 Z                # Homes Z again after QGL

  ##  Clean nozzle and then Klicky auto-z
  CLEAN_NOZZLE ZZ=1         # Clean the nozzle with zig-zag pattern
  CALIBRATE_Z               # Calibrates Z-offset with klicky
  M118 Z-offset set         # Displays info

  ##  Create a bed mesh
  M118 Performing bed mesh       # Displays info
  STATUS_MESHING                 # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate ADAPTIVE=1  # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  M118 Setting hotend to {target_extruder}c  # Displays info
  STATUS_EXT_HEATING                         # Sets SB-leds to heating-mode
  SMART_PARK                                 # Move toolhead close to print area
  M107                                       # Turns off partcooling fan
  M109 S{target_extruder}                    # Heats the nozzle to printing temp

  # Load skew calibration
  SKEW_PROFILE LOAD=CaliFlower
  
  # Gets ready to print by doing a purge line and updating the SB-leds
  M118 Now printing                          # Displays info
  STATUS_PRINTING                            # Sets SB-leds to printing-mode
  LINE_PURGE                                 # Prime nozzle
  G90                                        # Absolute position


#####################################################################
#   print_end macro
#####################################################################

[gcode_macro PRINT_END]

gcode:
  M400 # wait for buffer to clear
  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}

  # clear skew calibration
  SET_SKEW CLEAR=1
  SAVE_GCODE_STATE NAME=STATE_PRINT_END

  M118 Print done
  M118 Exhaust fan will run for 5 mins and then stop once bed, extruder and chamber temps <= 40c
  M400                                                                # Wait for buffer to clear
  G92 E0                                                              # Zero the extruder
  {% if printer.extruder.can_extrude %}
    G1 E-{mv.retraction_amount} F1800  # Retract filament 30mm/s
  {% endif %}

  STATUS_COOLING
  TURN_OFF_HEATERS
  SET_FAN_SPEED FAN=HEPA SPEED=1    # Turn on the exhaust fan fully

  G90                                                         # Absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                     # Move nozzle to remove stringing
  G0 X{mv.bucket_x} Y{printer["gcode_macro MY_VARIABLES"].bucket_y} Z{z_safe} F20000  # Park nozzle over bucket
  M107                                                        # Turn off partcooling fan

  # Run fans for 5 mins then check to turn off fans when temps fall to 40c
  UPDATE_DELAYED_GCODE ID=VENT_OFF DURATION={mv.fan_run_time}

  BED_MESH_CLEAR
  
  # Turns off the LEDs
  SET_PIN PIN=Chamber_Light VALUE=0.00

  RESTORE_GCODE_STATE NAME=STATE_PRINT_END


#####################################################################
#   Purges filament over the bucket.  
# Needs proper testing
#####################################################################

[gcode_macro PURGE_FILAMENT]

# parameters TOOL_TEMP, PURGE_LEN, POST_TOOL_TEMP

gcode:

  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    STATUS_PRINTING
    M118 Purging filament
    
    ## Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=purge_filament

    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    {% set bucket_x = mv.bucket_x %}
    {% set bucket_y = mv.bucket_y %}
    {% set clearance_z = mv.clearance_z %}
    {% set travel_speed_z = mv.travel_speed_z %}    # Travel speed along z axis in mm/min.
    {% set travel_speed_xy = mv.travel_speed_xy %}  # Travel speed along x and y-axis in mm/min.
    {% set purge_height = mv.purge_height %}        # Height of nozzle for purge
    {% set purge_len = mv.purge_len %}              # Amount of filament, in mm, to purge.
    {% set purge_speed = mv.purge_speed %}          # Speed, in mm/min, of the purge.
    {% set purge_temp_min = mv.purge_temp_min %}    # (Minimum) Temperature to purge at
    {% set post_purge_temp = mv.post_purge_temp %}  # Temperature to set hot end after purge.
    {% set purge_retract = mv.purge_retract %}      # Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
    {% set ooze_dwell = mv.ooze_dwell %}            # Dwell/wait time, in seconds, after purging and retracting.
 
    ## Set to absolute positioning.
    G90

    #raise to a safe travel Z if necessary
    {% if printer.toolhead.position.z < clearance_z %}
      G1 Z{clearance_z} F{travel_speed_z}
    {% endif %}
    
    # move to purge location and height
    G1 X{bucket_x} Y{bucket_y} F{travel_speed_xy}
    G1 Z{purge_height}
    
    # Set hot end to purging temperature and wait until it is reached.
    M109 S{params.TOOL_TEMP|default(purge_temp_min)|int}

    ### Perform purge 
    ### Small retract afterpurging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
    {% if printer.extruder.temperature >= purge_temp_min %}
      M83      ; relative mode
      M118 Purging now
      G1 E{params.PURGE_LEN|default(purge_len)|int} F{purge_speed}
      M118 Preventing ooze
      G1 E-{purge_retract} F{purge_speed * 5}
      G4 P{ooze_dwell * 1000}
      G92 E0   ; reset extruder
    {% endif %}
    M118 Filament purged

    # Set the hot end to the post purging temperature, if provided otherwise ignore
    {% if params.POST_TOOL_TEMP|default(-1)|int != -1 %}
      M118 Waiting for post purge hot end temperature
      M109 R{params.POST_TOOL_TEMP|int}
      M118 Temperature reached.
    {% endif %}

    M118 Filament purge complete.
    STATUS_READY
    
    ## Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=purge_filament
 
  {% else %}

    ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("PURGE_FILAMENT Axes must be homed first.") }
    M118 Please home before purging filament!

  {% endif %}

  
#####################################################################
#   Resume the printing.  Based on JSchuh's macro:
# https://github.com/jschuh/klipper-macros/blob/main/start_end.cfg
#
# This resume macro will move directly back to its previous position.
# If using “complete individual objects” or “one at a time” in your slicer, ensure that the objects are printed from back to front on the build plate to avoid collisions on the return.
#####################################################################

[gcode_macro resume]
description: Resumes the currently paused print.
#  Usage: RESUME [E<pos>]
rename_existing: BASE_RESUME  # Rename Mainsail Resume macro
variable_saved_extruder_temp: 0
variable_saved_x: 0.0
variable_saved_y: 0.0
variable_saved_z: 0.0
variable_saved_e: 0.0
gcode:
  {% if printer.pause_resume.is_paused %}                                        # Printer must be paused to resume it
    M118 Resuming print.
    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    
    {% set extruder = printer[printer.toolhead.extruder] %}                      # Warm the extruder back up if needed.
    {% if saved_extruder_temp > 0 %}
      M118 Resuming print: heating hotend.
      M109 S{saved_extruder_temp|int}                                            # wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)

    # If there's no saved_e assume we're completing a filament change and
    # retract enough to avoid drooling on the model.
    {% if 'E' not in params and not saved_e %}
      {% set saved_e = mv.retraction_amount %}
      G1 E{'%.4f' % -saved_e } F{mv.load_speed}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
    G90
    G0 X{saved_x} Y{saved_y} F{mv.travel_speed_xy}                               # Move back to last position before unretracting.
    G0 Z{saved_z} F{mv.travel_speed_z}
    G91
    
    G1 E{'%.4f' % (params.E|default(saved_e))} F{mv.load_speed}                  # Unretract

    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          # restore position
#    RESUME_BASE                                                                  # Base resume as renamed by Mainsail
    BASE_RESUME
    M118 Printing resumed.
 {% else %}
    M118 Printer is not paused.
  {% endif %}


#####################################################################
#   Moves the toolhead to a safe position regardless of axis homed 
# state and then performs a full home.
#####################################################################

[gcode_macro SAFELY_HOME]
# It is possible for the toolhead to end in a position that it can't be safely homed, e.g. in the top right corner
# This might occur after a tall print, or just moving the gantry around.  Homing, when X and Y are not currently
# homed causes a Z-Hop which risks crashing into the gantry if the toolhead is already at a high Z position.
#
# This macro will move the toolhead to a safe position and do a full home.
#
# Parameter: X_ADJ, Y_ADJ, Z_ADJ.  The adjustment to be applied to each axis.  If negative, the axis is presumed
#            to be at MAX; if positive the axis is presumed to be at 0.  If missing, the axis isn't adjusted and
#            is assumed to be at 0.

gcode:
  M117 Safely homeing axes
  STATUS_HOMING
  {% set x_adj = params.X_ADJ|default(0)|int %}
  {% set y_adj = params.Y_ADJ|default(0)|int %}
  {% set z_adj = params.Z_ADJ|default(0)|int %}
  
  {% if x_adj < 0 %}
    {% set assumed_x = printer.configfile.settings.stepper_x.position_max|int %}
  {% else %}
    {% set assumed_x = printer.configfile.settings.stepper_x.position_min|int %}
  {% endif %}

  {% if y_adj < 0 %}
    {% set assumed_y = printer.configfile.settings.stepper_y.position_max|int %}
  {% else %}
    {% set assumed_y = printer.configfile.settings.stepper_y.position_min|int %}
  {% endif %}

  {% if z_adj < 0 %}
    {% set assumed_z = printer.configfile.settings.stepper_z.position_max|int %}
   {% else %}
    {% set assumed_z = printer.configfile.settings.stepper_z.position_min|int %}
 {% endif %}

  # set the assumed toolhead position and make adjustments relative to that
  SET_KINEMATIC_POSITION X={assumed_x} Y={assumed_y} Z={assumed_z}
  G91 ; set relative
  G1 X{x_adj} Y{y_adj} Z{z_adj} F{printer["gcode_macro MY_VARIABLES"].safe_adj_speed}

  # reset back to absolute position and home all axes
  G90 ; set absolute
  G28 ; Home all

  M117 Axes safely homed.
  STATUS_READY


#####################################################################
#   Allows for the cooling down of heated elements before turning off
# the exhaust fan.  Ensures the chamber is properly vented.
#####################################################################

[delayed_gcode VENT_OFF]
initial_duration: 0
gcode:
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}
  {% set bed_temp = printer.heater_bed.temperature %}
  {% set bed_temp_low = mv.bed_temp_low %}
  {% set extruder_temp = printer.extruder.temperature %}
  {% set ext_temp_low = mv.ext_temp_low %}
  {% set chamber_temp = printer["temperature_sensor chamber"].temperature %}
  {% set chamber_temp_low = mv.chamber_temp_low %}

  {% if bed_temp <= bed_temp_low and extruder_temp <= ext_temp_low and chamber_temp <= chamber_temp_low %}  # Extruder temp and 
    SET_FAN_SPEED FAN=HEPA SPEED=0
    M118 Exhaust fan off
    STATUS_READY
  {% else %}
    M118 Waiting on temperature drop to stop exhaust fan
    UPDATE_DELAYED_GCODE ID=VENT_OFF DURATION={mv.fan_recheck_time}  # check again in 1 minute
  {% endif %}

