[include my_variables.cfg]
[include start_end.cfg]
[include printing.cfg]
[incldue motion.cfg]
[include filament.cfg]

  
#####################################################################
#   Centre nozzle over bed
#####################################################################
  
[gcode_macro CENTRE_NOZZLE]

gcode:
  {% set th = printer.toolhead %}
  {% set x_ctr = th.axis_maximum.x / 2 %}
  {% set y_ctr = th.axis_maximum.y / 2 %}
  {% set z_height = params.Z|default(printer["gcode_macro MY_VARIABLES"].clearance_z)|int %}
  
  # First, check if the axes are homed.
  {% if "xyz" in th.homed_axes %}
    STATUS_HOMING                           # not homing, but moving axes so use this status
    G90                                     # absolute position
    G1 X{x_ctr} Y{y_ctr} Z{z_height} F9000  # Move to centre
    STATUS_READY
    
  {% else %}

    ## raise error will stop any macros that CENTRE_NOZZLE is referenced in from proceeding for safety.
    { action_raise_error("CENTRE_NOZZLE Axes must be homed first.") }
    M118 Please home before centring nozzle!
    STATUS_READY
  {% endif %}


#####################################################################
#   Clean the nozzle with the brush
#####################################################################
  
[gcode_macro CLEAN_NOZZLE]
# Parameters: ZZ: Use zig-zsg wipe patter if 1, straight otherwise

gcode:

  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    STATUS_CLEANING
    M118 Cleaning the nozzle.
    ## Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=clean_nozzle
    G90 ; absolute positioning

    {% set use_zigzag = params.ZZ|default(0)|int %}
    {% set start_x = mv.clean_start_x %}
    {% set start_y = mv.clean_start_y %}
    {% set start_z = mv.clean_start_z %}
    {% set wipe_spd = mv.wipe_spd %}
    {% set wipe_qty = mv.wipe_qty %}
    {% set raise_distance = mv.clearance_z %}

    {% if use_zigzag == 0 %}
      {% set wipe_x_dist = mv.bucket_x - start_x %}
      G1 X{start_x} Y{start_y + 6} F6000  # adjust to the centre of the brush if doing straight wipe
    {% else %}
      {% set wipe_x_dist = mv.wipe_x_dist %}
      {% set wipe_y_dist = mv.wipe_y_dist %}
      G1 X{start_x} Y{start_y} F6000
    {% endif %}

    ## Move nozzle to start position
    G1 Z{start_z} F1500
    G91 ; relative movements

    {% if use_zigzag == 1 %}
      ## Wipe nozzle in zig-zags
      {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{wipe_x_dist} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist} Y{wipe_y_dist * -1} F{wipe_spd * 60}
        G1 X{wipe_x_dist} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist} Y{wipe_y_dist * -1} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist * -1} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist} F{wipe_spd * 60}
        G1 X{wipe_x_dist * -1} Y{wipe_y_dist * -1} F{wipe_spd * 60}
      {% endfor %}
    {% else %}
      ## Wipe nozzle in straight lines  
      {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{wipe_x_dist} F{wipe_spd * 60}
        G1 X-{wipe_x_dist} F{wipe_spd * 60}
      {% endfor %}
    {% endif %}
    
    G90 ; absolute positioning
    ## Raise nozzle
    G1 Z{raise_distance}
    M118 Nozzle cleaned
    STATUS_READY

    ## Restore the gcode state from this macro instance.
    RESTORE_GCODE_STATE NAME=clean_nozzle
     
  {% else %}

    ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("CLEAN_NOZZLE Axes must be homed first.") }
    M118 Please home before cleaning the nozzle!

  {% endif %}

  
#####################################################################
#   Move the toolhead front and centre.  Useful for filament load/unload
#####################################################################

[gcode_macro PARK_AT_FRONT]
gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    # Parameters
    M118 Parameter Z={params.Z}
    {% set z = params.Z|default(mv.clearance_z)|int %}                                              # z hop amount
    {% set e = params.E|default(0)|int %}                                               # hotend prime amount (in mm)
    SAVE_GCODE_STATE NAME=PARK_AT_FRONT                                                 # save current print position for resume
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      # check that zhop doesn't exceed z max
      G91 # relative positioning
      M400
      M118 Raising Z by {z}mm
      G1 Z{z} E-{e} F900                                                                # raise Z up by z hop amount and retract to help stringing    
    {% else %}
      { action_respond_info("Park zhop exceeds maximum Z height.") }                    # if z max is exceeded, show message and set zhop value for resume to 0
    {% endif %}
    G90                                                                                 # absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000  # park toolhead at front center
     
  {% else %}

    ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("PARK_AT_FRONT Axes must be homed first.") }
    M118 Please home before parking the nozzle!

  {% endif %}







#####################################################################
#   Moves the toolhead to a safe position regardless of axis homed 
# state and then performs a full home.
#####################################################################

[gcode_macro SAFELY_HOME]
# It is possible for the toolhead to end in a position that it can't be safely homed, e.g. in the top right corner
# This might occur after a tall print, or just moving the gantry around.  Homing, when X and Y are not currently
# homed causes a Z-Hop which risks crashing into the gantry if the toolhead is already at a high Z position.
#
# This macro will move the toolhead to a safe position and do a full home.
#
# Parameter: X_ADJ, Y_ADJ, Z_ADJ.  The adjustment to be applied to each axis.  If negative, the axis is presumed
#            to be at MAX; if positive the axis is presumed to be at 0.  If missing, the axis isn't adjusted and
#            is assumed to be at 0.

gcode:
  M117 Safely homeing axes
  STATUS_HOMING
  {% set x_adj = params.X_ADJ|default(0)|int %}
  {% set y_adj = params.Y_ADJ|default(0)|int %}
  {% set z_adj = params.Z_ADJ|default(0)|int %}
  
  {% if x_adj < 0 %}
    {% set assumed_x = printer.configfile.settings.stepper_x.position_max|int %}
  {% else %}
    {% set assumed_x = printer.configfile.settings.stepper_x.position_min|int %}
  {% endif %}

  {% if y_adj < 0 %}
    {% set assumed_y = printer.configfile.settings.stepper_y.position_max|int %}
  {% else %}
    {% set assumed_y = printer.configfile.settings.stepper_y.position_min|int %}
  {% endif %}

  {% if z_adj < 0 %}
    {% set assumed_z = printer.configfile.settings.stepper_z.position_max|int %}
   {% else %}
    {% set assumed_z = printer.configfile.settings.stepper_z.position_min|int %}
 {% endif %}

  # set the assumed toolhead position and make adjustments relative to that
  SET_KINEMATIC_POSITION X={assumed_x} Y={assumed_y} Z={assumed_z}
  G91 ; set relative
  G1 X{x_adj} Y{y_adj} Z{z_adj} F{printer["gcode_macro MY_VARIABLES"].safe_adj_speed}

  # reset back to absolute position and home all axes
  G90 ; set absolute
  G28 ; Home all

  M117 Axes safely homed.
  STATUS_READY
