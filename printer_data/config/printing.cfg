
#####################################################################
#   Cancels the print and runs the print end routin.  Based on Elis's macros:
# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT # Rename Mainsail Cancel Print macro
gcode:
  M118 Print cancelled.
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  # set timeout back to configured value
  CLEAR_PAUSE
  PRINT_END
  BASE_CANCEL_PRINT
  

#####################################################################
#  Resets the pause without resuming
#####################################################################

[gcode_macro CLEAR_PAUSE]
description: Clears the current pause state.
  Usage: CLEAR_PAUSE
rename_existing: BASE_CLEAR_PAUSE
gcode:
  SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
  BASE_CLEAR_PAUSE
  

#####################################################################
#   Pause the printing.  Based on JSchuh's macro:
# https://github.com/jschuh/klipper-macros/blob/main/start_end.cfg
#####################################################################
  
[gcode_macro PAUSE]
description: Pauses the current print.
#  Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing: BASE_PAUSE  # rename mainsail Pause macro

gcode:
  {% set mv = printer["gcode_macro MY_VARIABLES"] %}
  # Retract length (negative)
  {% set E = (params.E|default(mv.retraction_amount))|float %}             # Retration amount before parking
  {% set z = params.Z|default(mv.clearance_z)|int %}                       # Z-hop amount

  {% if printer.pause_resume.is_paused %}                                  # Printer must be running to pause it
    M118 Print already paused.
  {% elif printer.idle_timeout.state | string == "Printing" or
          (printer.virtual_sdcard|default({})).is_active|default(False) %}
    M118 Pausing print
    {% set position = printer.gcode_move.gcode_position %}
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"  # Tell Resume where to return to
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
    SAVE_GCODE_STATE NAME=PAUSE                                            # save current print position for resume
    BASE_PAUSE
    M83
    {% if printer.extruder.can_extrude %}
      G1 E{'%.4f' % -E} F{mv.load_speed}                                   # Retract the requested amount
    {% endif %}
    {% if (position.z + z) < printer.toolhead.axis_maximum.z %}            # check that z-hop doesn't exceed z max
      PARK_AT_FRONT Z={z} E=0
    {% else %}
      PARK_AT_FRONT Z=0 E=0
    {% endif %}
    SAVE_GCODE_STATE NAME=PAUSEPARK                                        # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    M118 Print paused.
  {% else %}
    M118 Print not in progress
  {% endif %}

  
#####################################################################
#   Resume the printing.  Based on JSchuh's macro:
# https://github.com/jschuh/klipper-macros/blob/main/start_end.cfg
#
# This resume macro will move directly back to its previous position.
# If using “complete individual objects” or “one at a time” in your slicer, ensure that the objects are printed from back to front on the build plate to avoid collisions on the return.
#####################################################################

[gcode_macro RESUME]
description: Resumes the currently paused print.
#  Usage: RESUME [E<pos>]
rename_existing: BASE_RESUME  # Rename Mainsail Resume macro
variable_saved_extruder_temp: 0
variable_saved_x: 0.0
variable_saved_y: 0.0
variable_saved_z: 0.0
variable_saved_e: 0.0
gcode:
  {% if printer.pause_resume.is_paused %}                                        # Printer must be paused to resume it
    M118 Resuming print.
    {% set mv = printer["gcode_macro MY_VARIABLES"] %}
    
    {% set extruder = printer[printer.toolhead.extruder] %}                      # Warm the extruder back up if needed.
    {% if saved_extruder_temp > 0 %}
      M118 Resuming print: heating hotend.
      M109 S{saved_extruder_temp|int}                                            # wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)

    # If there's no saved_e assume we're completing a filament change and
    # retract enough to avoid drooling on the model.
    {% if 'E' not in params and not saved_e %}
      {% set saved_e = mv.retraction_amount %}
      G1 E{'%.4f' % -saved_e } F{mv.load_speed}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
    G90
    G0 X{saved_x} Y{saved_y} F{mv.travel_speed_xy}                               # Move back to last position before unretracting.
    G0 Z{saved_z} F{mv.travel_speed_z}
    G91
    
    G1 E{'%.4f' % (params.E|default(saved_e))} F{mv.load_speed}                  # Unretract

    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          # restore position
    BASE_RESUME
    M118 Printing resumed.
 {% else %}
    M118 Printer is not paused.
  {% endif %}

